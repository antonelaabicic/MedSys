@page "/Patients/Edit/{id:int}"
@using System.ComponentModel.DataAnnotations
@using MedSys.Api.Dtos
@using MedSys.Api.Services
@inject IApiService ApiService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Edit Patient</PageTitle>
<h3>Edit Patient</h3>

<div class="pt-5">
    <EditForm Model="@currentPatient" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container-fluid">
            <div class="mb-3">
                <label for="FirstName" class="form-label">First Name</label>
                <InputText id="FirstName" class="form-control" @bind-Value="currentPatient.FirstName" />
            </div>
            <div class="mb-3">
                <label for="LastName" class="form-label">Last Name</label>
                <InputText id="LastName" class="form-control" @bind-Value="currentPatient.LastName" />
            </div>
            <div class="mb-3">
                <label for="DateOfBirth" class="form-label">Date Of Birth</label>
                <input id="DateOfBirth" type="date" class="form-control" @bind="currentPatient.DateOfBirth" min="1920-01-01" />
            </div>
            <div class="mb-3">
                <label for="Gender" class="form-label">Gender</label>
                <InputText id="Gender" class="form-control" @bind-Value="currentPatient.Gender" />
            </div>
            <div class="mb-3">
                <label for="Oib" class="form-label">OIB</label>
                <InputText id="Oib" class="form-control" @bind-Value="currentPatient.Oib" />
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    private PatientDTO currentPatient = new PatientDTO();
    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentPatient = await ApiService.GetByIdAsync<PatientDTO>(Id);
    }

    private async Task HandleValidSubmit()
    {
        var isUpdated = await ApiService.UpdateAsync<PatientDTO>(currentPatient.Id, currentPatient);
        if (isUpdated)
        {
            NavigateBack();
        }
        else
        {
            Console.WriteLine("Failed to update patient.");
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/Patients", forceLoad: false);
        Navigation.Refresh();
    }
}
 